/**
 * @file
 * @author Alice Liang
 *
 * Created on January 21, 2019
 * 
 * @brief Main Function of Autonomous Robot
 * 
 * Preconditions
 * @pre Co-processor running default program
 * @pre Correct connections and wiring of peripherals and sensors
 */

void main(void){
	See main.c
}

/**
 * @brief Set up and initiate peripherals, timer, and motors
 */

void initRun(void){
	enable interupts for peripherals;
	set up peripherals;
	initiate stack;
	enable interupt for timer;
	set timer to 2:50 minutes;
	start timer;
	enable motors;
	start motors;
}

/**
 * @brief regular run of robot
 */

void run(void){ //should there and back be the same function?
	int atCanister = 0; //is there a canister detected: 0 no, 1 yes
	int deployBall = 0; //should a ball be deployed: 0 no, 1 yes
	int atEnd = 0; // reused variable, 0 for there 1 for return
	int open = 0;//1 = closed, in Q: open =right, closed=left
	int distCheck = 0; //1 is >20cm
	float dist=0; //var for distance
	int rtn = 0;//0 for there, 1 for return
	int flag = 0;//do not check on return, 1 is check

	initRun();

	while(1){
		
		atCanister = isCanister();
		if ((atCanister == 1)&&(rtn==0)){
			runMotor(0,0); //pause motor
			distCheck = isDist(&prevDist,&dist);
			if (distCheck == 1){
				open = orientation();
				if (open == 0){		
					deployBall = canisterStatus(); //check conditions: is a ball inside
					if (deployBall == 1){
						dropBall();
					}
				}
			}	
			if ((distCheck == 1)&&(open==1)){flag=1;}
			else {flag=0;}

			push(flag); //info for return
			enque(dist, open)//add to queue for run stats open = 0 -> left else right
			runMotor(1,1);
		else if ((atCanister ==1)&&(rtn==1){
			runMotor(0,0);
			flag=pop();
			if (flag==1){
				deployBall = canisterStatus();
				if (deployBall==1){
					dropBall();
				}
			}
			runMotor(1,1);
			
		atEnd = isEnd(rtn);
		if ((atEnd == 1)&&(rtn == 0)){
			atEnd=0;
			turnAround(); //initate turn
		}
		else if ((atEnd == 1)&&(rtn == 1)){
			dispTermMessage();
			return;
	}
}

/**
 * @brief regular run of robot
 */

void isCanister(void){
	float sensor1;
	float sensor2;

	sensor1 = arduino ultrasonic sensor 1;
	sensor2 = arduino ultrasonic sensor 2;

	if (((sensor1<upperlim)&&(sensor1>lowerlim))&&((sensor2<upperlim)&&(sensor2>lowerlim))){
		return 1;
	}
	else{
		return 0;
	}
}

void runMotor(int instrL,int instrR){
	Set PWM 
	if (instrL==0){
		disable motorL;
	}
	else {
		enable motorL;
	}
	if (instrR==0){
		disable motorR;
	}
	else {
		enable motorR;
	return;
}


int isDist(float *prevDist,float *dist){
	float diff;
	*dist = dist from odometer from arduino;
	diff=*dist - *prevDist;
	if (diff<20){
		return 0;
	}
	else{
		return 1;
	}
}

int orientation(void){
	float sensor1;
	float sensor2;

	sensor1 = arduino ultrasonic sensor 1;
	sensor2 = arduino ultrasonic sensor 2;

	if (((sensor1<openupperlim)&&(sensor1>openlowerlim))&&((sensor2<openupperlim)&&(sensor2>openlowerlim))){
		return 1;
	}
	else{
		return 0;
	}
}

int canisterStatus(void){
	int colour = arduino colour sensor;
	if ((colour>colourlowerlim)&&(colour<colourupperlim)){//ball present inside
		return 0;
	}
	else{
		return 1;
	}
}

void dropBall(void){
	send PWM signal;
	pin = 1;
	reset servo to original location;
	return;
}

void turnAround(void){
	pause odometer;
	runmotor(0,1);
	__delay_us(turnTime);
	runmotor(1,1);
	__delay_us(straightTime);
	runmotor(0,1);
	delay_us(turnTime);
	runmotor(1,1);
	start odometer;
	return;
}

int isEnd(int rtn);
	read distance;
	if ((rtn==0)&&(distance>400)){
		return 1;
	}
	else if((rtn==1)&&(distance>800){
		return 1;
	}
	else{
		return 0;
	}
}

void dispTermMessage(void){
	int baskets=0;
	int left=0;
	int right=0;
	float temp[1];
	
	for (i=0;i<queuelength;i++){
		basket=basket+1;
		temp=dequeue();
		if (temp[1]==0){
			right=right+1;
		}
		else{
			left=left+1;
		}
	}
	lcd_clear();
	lcd_set_ddram_addr(LCD_LINE1_ADDR);
        printf("    Run Over");
	lcd_set_ddram_addr(LCD_LINE2_ADDR);
        printf("  %d canisters",basket);
	lcd_set_ddram_addr(LCD_LINE3_ADDR);
        printf("%d open left",left);
	lcd_set_ddram_addr(LCD_LINE4_ADDR);
        printf("%d open right",right);
	
	log1Info=log2Info;
	log2Infor=log3Info;
	log3Info= [basket,left,right];
        __delay_us(2500000);
	return;
}

void __interrupt() interruptHandler(void){
	if (Timer interrupt){
        	interruptFlag=0;
        	if (rtn==0){
			reverse motor direction;
			runmotor(1,1);
			while (isEnd()==0){continue;}
		}
		else{
			runmotor(1,1);
			while (isEnd()==0){continue;}
		}
		clear stack;
		dispTermMessage();
		return to main menu;//most likely done in assembly
	}
	if (EmergencyStop Interrupt){
        	interruptFlag=0;
		stop internal timer;
		runmotor(0,0);
		clear stack
		lcd_clear();
		lcd_set_ddram_addr(LCD_LINE1_ADDR);
        	printf("  Run Aborted!");
		__delay_us(1000000);
		lcd_clear();
		return to main menu;
	}
}

int stackT;

void initStack(void){
	int stack[10];
	stackT=0;
	return;
}

void push(int val){
	stack[stackT]=val;
	stackT=stackT+1;
	return;
}

int pop(void){
	stackT=stackT-1;
	return stack[stackT+1];
}

